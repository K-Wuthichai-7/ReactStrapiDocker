*****************************************************
React NodeJS Docker Workshop Online
*****************************************************
-------------------------------------------------------------
Day 1:
-------------------------------------------------------------
-----
# การขึ้นโปรเจ็กต์ React + Vite + TS + SWC
-----

Step 1:  คำสั่งขึ้นโปรเจ็กต์
---
npm create vite@latest

Step 2: ตั้งชื่อโปรเจ็กต์ และเลือกรูปแบบเป็น typescript + swc
---
Project name >> sample-react
Select a framework >> React
Select a variant >> TypeScript + SWC

Step 3: เปิดเข้า VSCode
---
code sample-react -r

Step 4: ติดตั้ง Node dependencies
---
npm install

Step 5: รันโปรเจ็กต์ด้วย Vite
---
npm run dev

-----
การขึ้นโปรเจ็กต์ React + Vite + TS + SWC + Docker
------

Step 1:  คำสั่งขึ้นโปรเจ็กต์
---
npm create vite@latest

Step 2: ตั้งชื่อโปรเจ็กต์ และเลือกรูปแบบเป็น typescript + swc
---
Project name >> sample-react-vite-docker
Select a framework >> React
Select a variant >> TypeScript + SWC

Step 3: เปิดเข้า VSCode
---
code sample-react-vite-docker -r

Step 4: เปิด Docker Desktop บนเครื่องขึ้นมา ทดสอบ HelloWorld Docker ดู
---
docker run hello-world

Step 5: สร้าง Dockerfile สำหรับกำหนด script ให้ docker ทำงานกับ image ที่ได้มา
---
# Pull the base image
FROM node:18.16.0-alpine

# Set the working directory
WORKDIR /usr/app

# Copy app dependencies to container
COPY ./package*.json ./

# Install dependencies
RUN npm install

# Copy code from host to container
COPY . .

# Expose Port
EXPOSE 5173

# Deploy app for local development
CMD [ "npm","run","dev" ]

Step 6: การสร้าง Container NodeJS+React ด้วยไฟล์ script ที่เรียกว่า docker-compose.yml
---
version: '3.9'

# Network
networks:
  web_network:
    name: reactdockervite
    driver: bridge

services:
  # React App Service
  reactapp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: reactapp_vite
    restart: always
    volumes:
      - ./:/usr/app
      - /usr/app/node_modules
    ports:
      - 5173:5173
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - web_network

Step 7: แก้ไขไฟล์ vite.config.js
---
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react-swc'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    watch: {
      usePolling: true,
    },
    host: true, 
    strictPort: true,
    port: 5173, 
  }
})

Step 8: ทดสอบว่าไฟล์ docker-compose.yml ทำงานถูกต้องหรือเปล่า
---
docker compose config

Step 9: ทำการ Run เป็น Service และ Container
---
docker compose up -d

ถ้าแก้ไขอะไรใน dockerfile และ docker-compose.yml แล้วจะรันใหม่
---
docker compose up -d  --build

-------------------------------------------------------------
Day 2:
-------------------------------------------------------------
-----
การขึ้นโปรเจ็กต์ React + Vite + TS + SWC + Docker (Dev and Prod)
------
Step 1:  คำสั่งขึ้นโปรเจ็กต์ React ด้วย Vite
---
npm create vite@latest

Step 2: ตั้งชื่อโปรเจ็กต์ และเลือกรูปแบบเป็น typescript + swc
---
Project name >> react-layout
Select a framework >> React
Select a variant >> TypeScript + SWC

Step 3: เปิดเข้า VSCode
---
code react-layout -r

Step 4: ทำการย้ายไฟล์ทั้งหมดไว้ใน react-layout/app
---

Step 5: สร้างไฟล์ Dockerfile.dev สำหรับ Devmode
---
# Pull the base image
FROM node:18.16.0-alpine

# Set the working directory
WORKDIR /usr/app

# Copy app dependencies to container
COPY ./package*.json ./

# Install dependencies
RUN npm install

# Copy code from host to container
COPY . .

# Expose Port
EXPOSE 5173

# Deploy app for local development
CMD [ "npm","run","dev" ]

Step 6: สร้างไฟล์ Dockerfile.prod สำหรับ Production
---
# Pull the base image
FROM node:18.16.0-alpine

# Set the working directory
WORKDIR /usr/app

# Copy app dependencies to container
COPY ./package*.json ./

# Install dependencies
RUN npm install

# Copy code from host to container
COPY . .

# Expose Port
EXPOSE 4173

# Deploy app for production
RUN npm run build

# Run the app
CMD ["npm","run","preview"]

Step 7: สร้าง config Nginx web server
---
สร้าง folder "nginx" และกำหนดไฟล์ "nginx.conf"
---

events {
  worker_connections 1024;
}

http {

  server {
    listen 80;

    location / {
      proxy_pass http://reactapp_prod:4173;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
  }

}

Step 8: สร้าง docker-compose.yml ไฟล์สำหรับสร้าง container react + nginx
---
สร้างไฟล์ .dockerignore สำหรับกำหนดว่าไม่ให้ docker container นำไฟล์เหล่านี้ไปรวม
---
**/.classpath
**/.dockerignore
**/.env
**/.git
**/.gitignore
**/.project
**/.settings
**/.toolstarget
**/.vs
**/.vscode
**/*.*proj.user
**/*.dbmdl
**/*.jfm
**/bin
**/charts
**/docker-compose*
**/compose*
**/Dockerfile*
**/node_modules
**/npm-debug.log
**/obj
**/secrets.dev.yaml
**/values.dev.yaml
LICENSE
README.md

กำหนด script ใน docker-compose.yml
---
version: '3.9'

# Network
networks:
  web_network:
    name: react_layout_network
    driver: bridge

# Services
services:

  # React App Development
  reactapp_dev:
    build: 
      context: ./app
      dockerfile: Dockerfile.dev
    container_name: reactapp_dev
    restart: always
    volumes:
      - ./app:/usr/app
      - /usr/app/node_modules  # Bookmarks Volume
    ports:
      - 5173:5173
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - web_network

  # React App Production
  reactapp_prod:
    build: 
      context: ./app
      dockerfile: Dockerfile.prod
    container_name: reactapp_prod
    restart: always
    ports:
      - 4173:4173
    networks:
      - web_network

  # Nginx Web Server
  nginx:
    image: nginx:latest
    container_name: nginx_reactapp
    restart: always
    ports:
      - 8080:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - reactapp_prod
    networks:
      - web_network


Step 9: ตรวจความถูกต้องของไฟล์ docker-compose.yml
---
docker compose config

Step 10: แก้ไข config ของไฟล์ vite.config.ts
---
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react-swc'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    watch: {
      usePolling: true,
    },
    host: true, 
    strictPort: true,
    port: 5173,
  }
})

Step 11: ทำการสั่ง Run Container ด้วย docker compose
---
docker compose up -d

ลองทำการ Down Service ทั้งหมดดู
---
docker compose down

Step 12: ทดลอง Run Service "reactapp_dev" เพียง service เดียว
---
docker compose up reactapp_dev -d

----
เริ่มสร้างวางโครงสร้างโปรเจ็กต์ด้วย Bootstrap CSS
----
Step 13: ลบไฟล์ App.css และ index.css ออกไปก่อน

Step 14: ติดตั้ง Lib Bootrap V.5
---
npm i bootstrap@5

Step 15: ติดตั้ง sass สำหรับสร้างไฟล์ scss
----
npm i sass

Step 16: สร้าง folder styles ใน src/styles
และไฟล์ style.scss ใน src/styles
---
@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+Thai&display=swap');

html, body {
    font-family: 'IBM Plex Sans Thai', sans-serif;
}

Step 17: Config ไฟล์ main.tsx เพื่อ import bootstrap มาใช้งานในโปรเจ็กต์
---
// Import Bootstrap CSS
import 'bootstrap/dist/css/bootstrap.min.css'

// Import Bootstrap JS
import 'bootstrap/dist/js/bootstrap.min.js'

// Custom CSS
import './styles/custom.scss'

Step 18: ทดสอบการใช้งาน Bootstrap CSS ที่ไฟล์ App.tsx
---
function App() {

  return (
    <>
      <h1 className="bg-primary text-white py-5">ฉันคือภาษาไทย</h1>
      <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nihil aut ipsa non, alias officia a, dolor hic aliquam veritatis eos maiores assumenda laboriosam aperiam totam minus inventore reiciendis culpa magni?</p>
    </>
  )
}

export default App


Step 19: สร้าง Component สำหรับ navbar,footer
ไว้ในโฟลเดอร์ components
---
กำหนดโค้ดในไฟล์ components/shared/Navbar.tsx
---
// rafce
const Navbar = () => {
  return (
    <nav className="navbar navbar-expand-lg navbar-dark bg-dark">
      <div className="container px-5">
        <a className="navbar-brand">ไอทีจีเนียส</a>
        <button className="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"><span className="navbar-toggler-icon" /></button>
        <div className="collapse navbar-collapse" id="navbarSupportedContent">
          <ul className="navbar-nav ms-auto mb-2 mb-lg-0">
            <li className="nav-item"><a className="nav-link">หน้าหลัก</a></li>
            <li className="nav-item"><a className="nav-link">เกี่ยวกับเรา</a></li>
            <li className="nav-item"><a className="nav-link">ติดต่อ</a></li>
            <li className="nav-item"><a className="nav-link">ราคา</a></li>
            <li className="nav-item"><a className="nav-link">ถามตอบ</a></li>
            <li className="nav-item dropdown">
              <a className="nav-link dropdown-toggle" id="navbarDropdownBlog" role="button" data-bs-toggle="dropdown" aria-expanded="false">บลอก</a>
              <ul className="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdownBlog">
                <li><a className="dropdown-item">หน้าหลักบลอก</a></li>
                <li><a className="dropdown-item">บลอกโพสต์</a></li>
              </ul>
            </li>
            <li className="nav-item dropdown">
              <a className="nav-link dropdown-toggle" id="navbarDropdownPortfolio" role="button" data-bs-toggle="dropdown" aria-expanded="false">ผลงาน</a>
              <ul className="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdownPortfolio">
                <li><a className="dropdown-item">รวมผลงาน</a></li>
                <li><a className="dropdown-item">รายละเอียดผลงาน</a></li>
              </ul>
            </li>
          </ul>
        </div>
      </div>
    </nav>
  )
}

export default Navbar

แก้ไขไฟล์ Footer.tsx
---
const Footer = () => {
  return (
    <footer className="bg-dark py-4 mt-auto">
        <div className="container px-5">
            <div className="row align-items-center justify-content-between flex-column flex-sm-row">
            <div className="col-auto"><div className="small m-0 text-white">Copyright © Your Website 2022</div></div>
            <div className="col-auto">
                <a className="link-light small" href="#!">Privacy</a>
                <span className="text-white mx-1">·</span>
                <a className="link-light small" href="#!">Terms</a>
                <span className="text-white mx-1">·</span>
                <a className="link-light small" href="#!">Contact</a>
            </div>
            </div>
        </div>
    </footer>
  )
}

export default Footer

Step 20: สร้าง MainLayout.tsx ไว้ใน components/layouts/MainLayout.tsx
---
import Navbar from '../shared/Navbar'
import Footer from '../shared/Footer'

const MainLayout = ({ children }) => {
  return (
    <>

    <Navbar />

    { children }

    <Footer />

    </>
  )
}

export default MainLayout

Step 21: ทดสอบเรียกใช้ MainLayout ในหน้า App.tsx
---
import MainLayout from './components/layouts/MainLayout'

function App() {

  return (
    <MainLayout>
      <header className="bg-dark py-5">
        <div className="container px-5">
          <div className="row gx-5 align-items-center justify-content-center">
            <div className="col-lg-8 col-xl-7 col-xxl-6">
              <div className="my-5 text-center text-xl-start">
                <h1 className="display-5 fw-bolder text-white mb-2">A Bootstrap 5 template for modern businesses</h1>
                <p className="lead fw-normal text-white-50 mb-4">Quickly design and customize responsive mobile-first sites with Bootstrap, the world’s most popular front-end open source toolkit!</p>
                <div className="d-grid gap-3 d-sm-flex justify-content-sm-center justify-content-xl-start">
                  <a className="btn btn-primary btn-lg px-4 me-sm-3" href="#features">Get Started</a>
                  <a className="btn btn-outline-light btn-lg px-4" href="#!">Learn More</a>
                </div>
              </div>
            </div>
            <div className="col-xl-5 col-xxl-6 d-none d-xl-block text-center"><img className="img-fluid rounded-3 my-5" src="https://dummyimage.com/600x400/343a40/6c757d" alt="..." /></div>
          </div>
        </div>
      </header>
      {/* Features section*/}
      <section className="py-5" id="features">
        <div className="container px-5 my-5">
          <div className="row gx-5">
            <div className="col-lg-4 mb-5 mb-lg-0"><h2 className="fw-bolder mb-0">A better way to start building.</h2></div>
            <div className="col-lg-8">
              <div className="row gx-5 row-cols-1 row-cols-md-2">
                <div className="col mb-5 h-100">
                  <div className="feature bg-primary bg-gradient text-white rounded-3 mb-3"><i className="bi bi-collection" /></div>
                  <h2 className="h5">Featured title</h2>
                  <p className="mb-0">Paragraph of text beneath the heading to explain the heading. Here is just a bit more text.</p>
                </div>
                <div className="col mb-5 h-100">
                  <div className="feature bg-primary bg-gradient text-white rounded-3 mb-3"><i className="bi bi-building" /></div>
                  <h2 className="h5">Featured title</h2>
                  <p className="mb-0">Paragraph of text beneath the heading to explain the heading. Here is just a bit more text.</p>
                </div>
                <div className="col mb-5 mb-md-0 h-100">
                  <div className="feature bg-primary bg-gradient text-white rounded-3 mb-3"><i className="bi bi-toggles2" /></div>
                  <h2 className="h5">Featured title</h2>
                  <p className="mb-0">Paragraph of text beneath the heading to explain the heading. Here is just a bit more text.</p>
                </div>
                <div className="col h-100">
                  <div className="feature bg-primary bg-gradient text-white rounded-3 mb-3"><i className="bi bi-toggles2" /></div>
                  <h2 className="h5">Featured title</h2>
                  <p className="mb-0">Paragraph of text beneath the heading to explain the heading. Here is just a bit more text.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
      {/* Testimonial section*/}
      <div className="py-5 bg-light">
        <div className="container px-5 my-5">
          <div className="row gx-5 justify-content-center">
            <div className="col-lg-10 col-xl-7">
              <div className="text-center">
                <div className="fs-4 mb-4 fst-italic">"Working with Start Bootstrap templates has saved me tons of development time when building new projects! Starting with a Bootstrap template just makes things easier!"</div>
                <div className="d-flex align-items-center justify-content-center">
                  <img className="rounded-circle me-3" src="https://dummyimage.com/40x40/ced4da/6c757d" alt="..." />
                  <div className="fw-bold">
                    Tom Ato
                    <span className="fw-bold text-primary mx-1">/</span>
                    CEO, Pomodoro
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* Blog preview section*/}
      <section className="py-5">
        <div className="container px-5 my-5">
          <div className="row gx-5 justify-content-center">
            <div className="col-lg-8 col-xl-6">
              <div className="text-center">
                <h2 className="fw-bolder">From our blog</h2>
                <p className="lead fw-normal text-muted mb-5">Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eaque fugit ratione dicta mollitia. Officiis ad.</p>
              </div>
            </div>
          </div>
          <div className="row gx-5">
            <div className="col-lg-4 mb-5">
              <div className="card h-100 shadow border-0">
                <img className="card-img-top" src="https://dummyimage.com/600x350/ced4da/6c757d" alt="..." />
                <div className="card-body p-4">
                  <div className="badge bg-primary bg-gradient rounded-pill mb-2">News</div>
                  <a className="text-decoration-none link-dark stretched-link" href="#!"><h5 className="card-title mb-3">Blog post title</h5></a>
                  <p className="card-text mb-0">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                </div>
                <div className="card-footer p-4 pt-0 bg-transparent border-top-0">
                  <div className="d-flex align-items-end justify-content-between">
                    <div className="d-flex align-items-center">
                      <img className="rounded-circle me-3" src="https://dummyimage.com/40x40/ced4da/6c757d" alt="..." />
                      <div className="small">
                        <div className="fw-bold">Kelly Rowan</div>
                        <div className="text-muted">March 12, 2022 · 6 min read</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className="col-lg-4 mb-5">
              <div className="card h-100 shadow border-0">
                <img className="card-img-top" src="https://dummyimage.com/600x350/adb5bd/495057" alt="..." />
                <div className="card-body p-4">
                  <div className="badge bg-primary bg-gradient rounded-pill mb-2">Media</div>
                  <a className="text-decoration-none link-dark stretched-link" href="#!"><h5 className="card-title mb-3">Another blog post title</h5></a>
                  <p className="card-text mb-0">This text is a bit longer to illustrate the adaptive height of each card. Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                </div>
                <div className="card-footer p-4 pt-0 bg-transparent border-top-0">
                  <div className="d-flex align-items-end justify-content-between">
                    <div className="d-flex align-items-center">
                      <img className="rounded-circle me-3" src="https://dummyimage.com/40x40/ced4da/6c757d" alt="..." />
                      <div className="small">
                        <div className="fw-bold">Josiah Barclay</div>
                        <div className="text-muted">March 23, 2022 · 4 min read</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className="col-lg-4 mb-5">
              <div className="card h-100 shadow border-0">
                <img className="card-img-top" src="https://dummyimage.com/600x350/6c757d/343a40" alt="..." />
                <div className="card-body p-4">
                  <div className="badge bg-primary bg-gradient rounded-pill mb-2">News</div>
                  <a className="text-decoration-none link-dark stretched-link" href="#!"><h5 className="card-title mb-3">The last blog post title is a little bit longer than the others</h5></a>
                  <p className="card-text mb-0">Some more quick example text to build on the card title and make up the bulk of the card's content.</p>
                </div>
                <div className="card-footer p-4 pt-0 bg-transparent border-top-0">
                  <div className="d-flex align-items-end justify-content-between">
                    <div className="d-flex align-items-center">
                      <img className="rounded-circle me-3" src="https://dummyimage.com/40x40/ced4da/6c757d" alt="..." />
                      <div className="small">
                        <div className="fw-bold">Evelyn Martinez</div>
                        <div className="text-muted">April 2, 2022 · 10 min read</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          {/* Call to action*/}
          <aside className="bg-primary bg-gradient rounded-3 p-4 p-sm-5 mt-5">
            <div className="d-flex align-items-center justify-content-between flex-column flex-xl-row text-center text-xl-start">
              <div className="mb-4 mb-xl-0">
                <div className="fs-3 fw-bold text-white">New products, delivered to you.</div>
                <div className="text-white-50">Sign up for our newsletter for the latest updates.</div>
              </div>
              <div className="ms-xl-4">
                <div className="input-group mb-2">
                  <input className="form-control" type="text" placeholder="Email address..." aria-label="Email address..." aria-describedby="button-newsletter" />
                  <button className="btn btn-outline-light" id="button-newsletter" type="button">Sign up</button>
                </div>
                <div className="small text-white-50">We care about privacy, and will never share your data.</div>
              </div>
            </div>
          </aside>
        </div>
      </section>
    </MainLayout>
  )
}

export default App


-------------------------------------------------------------
Day 3: React Material UI
-------------------------------------------------------------
-----
# การขึ้นโปรเจ็กต์ React + Vite + TS + SWC+ Material UI
-----
Step 1: Clone Project
---
git clone https://github.com/iamsamitdev/react-mui-strapi.git

Step 2: ตรวจสอบความถูกต้องของ docker-compose.yml ไฟล์
---
docker compose config

Step 3: Create container
---
docker compose up -d
docker compose up -d --build

Step 4: Install Material UI Library
---
npm install @mui/material @emotion/react @emotion/styled

Step 5: Config tsconfig.json
---

"compilerOptions": {
    "lib": ["es6", "dom"],
    "noImplicitAny": true,
    "noImplicitThis": true,
    "strictNullChecks": true,
}

Step 6: ทดสอบเรียกใช้งาน MUI ที่ไฟล์ src/App.tsx
---
*** ลบไฟล์ App.css ใน src อออก
*** ลบคำสั่ง css ในไฟล์ index.css ออกทั้งหมด

import { Button } from '@mui/material'

function App() {

  return (
    <>
      <h1>MUI Button</h1>
      <Button variant="text">Text</Button>
      <Button variant="contained">Contained</Button>
      <Button variant="outlined">Outlined</Button>
    </>
  )
}

export default App

*** เพิ่ม goole font ที่ไฟล์ index.html
---
<link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+Thai:wght@200;300;400;500;600;700&display=swap" rel="stylesheet">

กำหนดโค้ดที่ไฟล์ index.css
---
html, body {
    font-family: 'IBM Plex Sans Thai', sans-serif;
}


Step 7: ติดตั้ง Material Icons
---
npm install @mui/icons-material


Step 8: ทดสอบใช้งาน Icons
---
<h3>MUI Button with Icon</h3>
        <Stack direction="row" spacing={2}>
          <Button variant="text" startIcon={<Delete />}>Delete</Button>
          <Button variant="contained" startIcon={<Send />}>Send</Button>
          <Button variant="outlined" startIcon={<Photo />}>Photo</Button>
        </Stack>

Step 9: การสร้าง Theme ใน MUI
---
สร้าง src/config/theme.ts

import { createTheme } from '@mui/material/styles'
import { green, grey, indigo } from '@mui/material/colors'

// Create a theme instance.
let theme = createTheme()

// Custom theme
theme = createTheme(theme, {
    palette: {
        primary: {
            main: grey[700],
            light: grey[50],
            dark: grey[900],
        },
        secondary: {
            main: indigo[50],
        },
        success: {
            main: green[500],
            light: green[50],
            dark: green[900],
        },
    },
    typography: {
        link: {
            fontSize: '0.8rem',
            [theme.breakpoints.up('md')]: {
                fontSize: '0.9rem',
            },
            fontWeight: 500,
            color: theme.palette.primary.main,
            display: 'block',
            cursor: 'pointer'
        },
        cardTitle: {
            fontSize: '1.2rem',
            display: 'block',
            fontWeight: 500
        },
        h6: {
            fontSize: '1rem',
        },
        h7: {
            fontSize: '0.8rem', 
        },
        h8: {
            fontSize: '0.7rem', 
        }
    },
})

export default theme

Step 10: config ไฟล์ main.tsx
---
import React from 'react'
import ReactDOM from 'react-dom/client'

// ThemeProvider is required for Material-UI
import { ThemeProvider } from '@mui/material'

// Import the theme
import theme from './config/theme'

import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <ThemeProvider theme={theme}>
    <App />
    </ThemeProvider>
  </React.StrictMode>,
)


Step 11: Create AuthLayout.tsx in src/layouts
---
import { Outlet } from "react-router-dom"
import { Box } from "@mui/material"

const AuthLayout = () => {
  return (
    <>
      <Box>
        <Outlet />
      </Box>
    </>
  )
}

export default AuthLayout

Step 12: Install react-pro-sidebar
---
npm i react-pro-sidebar@1.0.0

Step 13: Create AppHeader.tsx in components
---
import { AppBar, Box, IconButton, Toolbar } from "@mui/material"
import MenuIcon from '@mui/icons-material/Menu'
import SettingsIcon from '@mui/icons-material/Settings'
import LogoutIcon from '@mui/icons-material/Logout'

const AppHeader = () => {

    return (
        <AppBar position="sticky" sx={styles.appBar}>
            <Toolbar>
                <IconButton color="secondary">
                    <MenuIcon />
                </IconButton>
                <Box
                    component={'img'}
                    sx={styles.appLogo}
                    src="/assets/logo_round.png" />
                <Box sx={{ flexGrow: 1 }} />
                <IconButton title="Settings" color="secondary">
                    <SettingsIcon />
                </IconButton>
                <IconButton title="Sign Out" color="secondary">
                    <LogoutIcon />
                </IconButton>
            </Toolbar>
        </AppBar>
    )
}

const styles = {
    appBar: {
        // bgcolor: 'neutral.main'
        bgcolor: 'teal'
    },
    appLogo: {
        borderRadius: 2,
        width: 40,
        marginLeft: 2,
        cursor: 'pointer'
    }
}

export default AppHeader

Step 14: Create SideNav.tsx in src/components
---
import { Avatar, Box, Typography } from "@mui/material"
import { Menu, MenuItem, Sidebar } from "react-pro-sidebar"
import DashboardOutlinedIcon from '@mui/icons-material/DashboardOutlined'
import StyleOutlinedIcon from '@mui/icons-material/StyleOutlined'
import SourceOutlinedIcon from '@mui/icons-material/SourceOutlined'
import AnalyticsOutlinedIcon from '@mui/icons-material/AnalyticsOutlined'

const SideNav = () => {
    return (
        <Sidebar
            style={{ height: "100%", top: 'auto' }}
            breakPoint="md"
            backgroundColor={'white'}
        >
            <Box sx={styles.avatarContainer}>
                <Avatar sx={styles.avatar} alt="Masoud" src="/assets/samit.jpg" />
                <Typography variant="body2" sx={styles.yourChannel}>Samit Koyom</Typography>
                <Typography variant="body2">Administrator</Typography>
            </Box>

            <Menu
                menuItemStyles={{

                }}>
                <MenuItem icon={<DashboardOutlinedIcon />}> <Typography variant="body2">Dashboard</Typography> </MenuItem>
                <MenuItem icon={<SourceOutlinedIcon />}> <Typography variant="body2">Product </Typography></MenuItem>
                <MenuItem icon={<AnalyticsOutlinedIcon />}> <Typography variant="body2">Report </Typography></MenuItem>
                <MenuItem icon={<StyleOutlinedIcon />}> <Typography variant="body2">Setting </Typography></MenuItem >
            </Menu >
        </Sidebar >
    )
}

const styles = {
    avatarContainer: {
        display: "flex",
        alignItems: "center",
        flexDirection: 'column',
        my: 5
    },
    avatar: {
        width: '40%',
        height: 'auto'
    },
    yourChannel: {
        mt: 1
    }
}

export default SideNav

Step 15: Create BackendLayout.tsx in src/layouts
---
import { Outlet } from "react-router-dom"
import { Box } from "@mui/material"
import CssBaseline from "@mui/material/CssBaseline"
import AppHeader from "../components/AppHeader"
import SideNav from "../components/SideNav"

const BackendLayout = () => {
  return (
    <>
        <CssBaseline />
        <AppHeader />
        <Box sx={styles.container}>
          <SideNav />
          <Box component={"main"} sx={styles.mainSection}>
            <Outlet />
          </Box>
        </Box>
    </>
  )
}

const styles = {
  container: {
    display: "flex",
    bgcolor: "neutral.light",
  },
  mainSection: {
    px: 4,
    width: "100%",
    height: "100%",
    overflow: "auto",
  },
}

export default BackendLayout

Step 16: Create Login.tsx in src/pages
---
const Login = () => {
  return (
    <>
        <h1>Login</h1>
    </>
  )
}

export default Login

Step 17: Create Dashboard.tsx in src/pages
---
const Dashboard = () => {
  return (
    <>
        <h1>Dashboard</h1>
    </>
  )
}

export default Dashboard

Step 18: install react-router-dom
---
npm install react-router-dom@6

Step 19: config ProSidebarProvider in main.tsx
---
// Import ProSidebarProvider
import { ProSidebarProvider } from 'react-pro-sidebar'

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <ProSidebarProvider>
      <ThemeProvider theme={theme}>
        <App />
      </ThemeProvider>
    </ProSidebarProvider>
  </React.StrictMode>,
)

Step 20: กำหนด Routing ที่ไฟล์ App.tsx
---
import { BrowserRouter, Route, Routes } from 'react-router-dom'
import Login from './pages/Login'
import BackendLayout from './layouts/BackendLayout'
import AuthLayout from './layouts/AuthLayout'

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route element={<AuthLayout />}>
          <Route path="/" element={<Login />} />
        </Route>
        <Route element={<BackendLayout />}>
          <Route path="/backend/dashboard" element={<h1>Dashboard</h1>} />
        </Route>
      </Routes>
    </BrowserRouter>
  )
}

export default App

Step 21: Create Product.tsx, Report.tsx, Setting.tsx in src/pages
---

const Product = () => {
    return (
      <>
          <h1>Product</h1>
      </>
    )
  }
  
  export default Product


Step 22: Config Route in App.tsx
---

import { BrowserRouter, Route, Routes } from 'react-router-dom'
import Login from './pages/Login'
import BackendLayout from './layouts/BackendLayout'
import AuthLayout from './layouts/AuthLayout'

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route element={<AuthLayout />}>
          <Route path="/" element={<Login />} />
        </Route>
        <Route element={<BackendLayout />}>
          <Route path="/backend/dashboard" element={<h1>Dashboard</h1>} />
          <Route path="/backend/product" element={<h1>Product</h1>} />
          <Route path="/backend/report" element={<h1>Report</h1>} />
          <Route path="/backend/setting" element={<h1>Setting</h1>} />
        </Route>
      </Routes>
    </BrowserRouter>
  )
}

export default App

Step 23: Set Link in SideNav.tsx
---
<MenuItem component={<Link to="/backend/dashboard" />} icon={<DashboardOutlinedIcon />}> <Typography variant="body2">Dashboard</Typography> </MenuItem>
                <MenuItem component={<Link to="/backend/product" />} icon={<SourceOutlinedIcon />}> <Typography variant="body2">Product </Typography></MenuItem>
                <MenuItem component={<Link to="/backend/report" />} icon={<AnalyticsOutlinedIcon />}> <Typography variant="body2">Report </Typography></MenuItem>
                <MenuItem component={<Link to="/backend/setting" />} icon={<StyleOutlinedIcon />}> <Typography variant="body2">Setting </Typography></MenuItem >

Step 24: Toggle SideNav
---
import { useProSidebar } from "react-pro-sidebar"

const AppHeader = () => {

// useProSidebar hook
  const { collapseSidebar, toggleSidebar, broken } = useProSidebar()

}

 <IconButton onClick={()=> broken ? toggleSidebar() : collapseSidebar()}
            color="secondary">
                <MenuIcon />
            </IconButton>

Step 25: Create Login Screen
---
import { TextField, Button } from "@mui/material"

const Login = () => {
  return (
    <>
        <h1>Login</h1>
        <form>
          <div>
            <TextField label="Username"
              type="text"
              variant="outlined"
            />
          </div>

          <div>
            <TextField label="Password"
              type="password"
              variant="outlined"
            />
          </div>
          <div>
            <Button variant="contained" color="primary" type="submit">
              Login
            </Button>
          </div>
        </form>
    </>
  )
}

export default Login


Step 26: การจัดการกับแบบฟอร์มด้วย react-hook-form
---
ติดตั้ง
npm install react-hook-form@7

เรียกใช้งานที่หน้า Login.tsx
---
import { TextField, Button } from "@mui/material"
import { useForm } from "react-hook-form"

const Login = () => {

  // useForm hook
  const { register, handleSubmit, formState: { errors } } = useForm()

  // onSubmit function
  const onSubmit = (data: any) => {
    console.log(data)
  }

  return (
    <>
        <h1>Login</h1>
        <form onSubmit={handleSubmit(onSubmit)}>
          <div>
            <TextField label="Username"
              type="text"
              variant="outlined"
              {...register("username", { required: true, minLength: 5 })}
              error={errors.username ? true : false}
              helperText={errors.username ? "Username is required" : ""}
            />
          </div>

          <div>
            <TextField label="Password"
              type="password"
              variant="outlined"
              {...register("password", { required: true })}
              error={errors.password ? true : false}
              helperText={errors.password ? "Password is required" : ""}
            />
          </div>
          <div>
            <Button variant="contained" color="primary" type="submit">
              Login
            </Button>
          </div>
        </form>
    </>
  )
}

export default Login



